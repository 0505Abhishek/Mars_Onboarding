<%- include("../shared/header.ejs") %>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    .modal-backdrop {
        display: none !important;
    }

    .modal-body {
        max-height: 440px;
        overflow-y: auto;
    }
    .modal-dialog{
        width:75%;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ccc;
        padding: 10px;
        text-align: center;
    }

    .view-icon {
        cursor: pointer;
        font-size: 20px;
    }

    .table-dark th {
        color: #0000A0 !important;
        background-color: #E0E0FC;
        border: 1px solid rgb(224, 203, 203);
    }

    #documentTable tbody tr:nth-child(odd) td {
        background: #FFFFFF !important;
    }

    #documentTable tbody tr:nth-child(even) td {
        background: #EFEFFF !important;
    }

    .action-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
    }
    .custom-blue {
        background-color: #007BFF !important;
        color: white !important;
        border: none !important;
    }
</style>

<style>
    .back-link {
        font-size: 1.5rem;
        font-weight: 500;
        text-decoration: none;
        color: #1a1a1a; /* Adjust color as per your design */
        display: flex;
        align-items: center;
        margin-bottom:20px;
    }

    .back-link i {
        font-size: 20px;
        margin-right: 8px;
    }
</style>


<div class="container mt-4 mb-4">

    <div class="d-flex justify-content-between align-items-center">
        <a href="/distributorList" class="back-link">
            <i class="fa fa-angle-left"></i> Document Verification
        </a>
    </div>
    <div class="table-responsive">
        <table id="documentTable">
            <thead>
                <tr>
                    <th>S. No.</th>
                    <th>Document Name</th>
                    <th>View</th>
                    <th>‚úî</th>
                    <th>‚ùå</th>
                    <th>Remarks</th>
                </tr>
            </thead>
            <tbody>
                <% 
                const documentMappings = [
                    { key: "crf_form", name: "CRF Form", mandatory: true },
                    { key: "gst_certificate", name: "GST Certificate", mandatory: true },
                    { key: "fssai_certificate", name: "FSSAI Certificate", mandatory: true },
                    { key: "pan_card", name: "PAN Card", mandatory: true },
                    { key: "cancelled_cheque", name: "Cancelled Cheque", mandatory: true },
                    { key: "db_agreement", name: "DB Agreement", mandatory: true },
                    { key: "godown_insurance", name: "Godown Insurance", mandatory: true },
                    { key: "rsm_email_approval", name: "RSM Email Approval", mandatory: true },
                    { key: "replacement_noc", name: "Replacement NOC", mandatory: distributor.applicationType === "replacement" },
                    { key: "fssai_amendment_copy", name: "FSSAI Amendment Copy", mandatory: true},
                    { key: "freight_sheet", name: "Freight Sheet", mandatory: distributor.dbType == "Hub" },
                    { key: "bank_statement", name: "Bank Statement", mandatory: distributor.dbType == "Credit" }
                ];
            
                documentMappings.forEach((doc, index) => { 
                    // If the document is conditional and does not meet the requirement, skip it
                    if (doc.mandatory === false || doc.mandatory === undefined) return;
            
                    const file = distributor[doc.key]; 
                    let remarks = "";
                %>
                    <tr>
                        <td><%= index + 1 %></td>
                        <td><%= doc.name %></td>
                        <td>
                            <% if (file) { 
                                const fileExtension = file.split('.').pop().toLowerCase();
                                const fileType = (fileExtension === "pdf") ? "pdf" : "image"; 
                            %>
                                <a href="#" class="view-icon" data-url="/uploads/<%= file %>" data-type="<%= fileType %>" style="text-decoration:none;">
                                    üëÅ
                                </a>
                            <% } else { %>
                                <span style="color: red;">Not Uploaded</span>
                            <% } %>
                        </td>
                        
                        <td>
                            <input type="radio" name="doc_<%= doc.key %>" value="tick">
                        </td>
                        <td>
                            <input type="radio" name="doc_<%= doc.key %>" value="cross">
                        </td>
                        <td>
                            <input type="text" placeholder="Enter remarks" value="<%= remarks %>">
                        </td>
                    </tr>
                <% }); %>
            </tbody>
            
            
            
        </table>
    </div>
    

    <div class="action-buttons">
        <button class="btn btn-primary" id="correctionBtn">Correction</button>
        <button class="btn btn-primary" id="approveBtn">Approve</button>
    </div>
    
</div>

<!-- Modal for File Preview -->
<div class="modal" id="fileModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Document Preview</h5>
                <button type="button" class="close" data-bs-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body text-center">
                <div id="filePreview"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
   document.addEventListener("DOMContentLoaded", function () {
    const viewIcons = document.querySelectorAll(".view-icon");
    const modalElement = document.getElementById("fileModal");
    const modalBody = document.getElementById("filePreview");
    const modalInstance = new bootstrap.Modal(modalElement);

    viewIcons.forEach((icon) => {
        icon.addEventListener("click", function (event) {
            event.preventDefault(); // Prevent default link action

            const fileUrl = this.getAttribute("data-url");
            const fileType = this.getAttribute("data-type");

            if (fileUrl && fileType) {
                if (fileType === "image") {
                    modalBody.innerHTML = `<img src="${fileUrl}" style="width: 100%; height: auto;">`;
                } else if (fileType === "pdf") {
                    modalBody.innerHTML = `<embed src="${fileUrl}" type="application/pdf" width="100%" height="500px" />`;
                } else {
                    modalBody.innerHTML = `<p>Unsupported file type</p>`;
                }

                modalInstance.show();
            }
        });
    });

});

</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const approveBtn = document.getElementById("approveBtn");
    const correctionBtn = document.getElementById("correctionBtn");

    let isSubmitted = false;  // Prevent multiple submissions

    function collectFormData() {
        let documents = [];
        document.querySelectorAll("#documentTable tbody tr").forEach(row => {
            const radioSelected = row.querySelector('input[type="radio"]:checked');
            const remarks = row.querySelector('input[type="text"]').value.trim();
            
            if (radioSelected) {
                documents.push({
                    doc_key: radioSelected.name.replace("doc_", ""), 
                    status: radioSelected.value, 
                    remarks: remarks || null
                });
            }
        });
        return documents;
    }

    function isAnyCrossChecked() {
        return document.querySelectorAll('input[type="radio"][value="cross"]:checked').length > 0;
    }

    function sendDataToAPI(actionType) {
        if (isSubmitted) return; // Prevent multiple submissions

        isSubmitted = true;
        approveBtn.disabled = true;
        correctionBtn.disabled = true;

        const documentsData = collectFormData();
        
        fetch("/distributorList/<%=application_id%>", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                action: actionType,
                documents: documentsData
            })
        })
        .then(response => response.json())
        .then(data => {
            Swal.fire({
                icon: "success",
                title: actionType === "approve" ? "Approved" : "Correction Requested",
                text: `The documents have been ${actionType === "approve" ? "approved" : "sent for correction"}.`
            }).then(() => {
                window.location.href = "/distributorList";  
            });
        })
        .catch(error => {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: "Something went wrong while submitting."
            });

            // Re-enable buttons in case of an error
            isSubmitted = false;
            approveBtn.disabled = false;
            correctionBtn.disabled = false;
        });
    }

    correctionBtn.addEventListener("click", function () {
        if (!isAnyCrossChecked()) {  
            Swal.fire({
                icon: "warning",
                title: "Correction Not Allowed",
                text: "Nothing is marked for correction."
            });
            return; 
        }
        sendDataToAPI("correction");
    });

    approveBtn.addEventListener("click", function () {
        if (isAnyCrossChecked()) {   
            Swal.fire({
                icon: "warning",
                title: "Approval Not Allowed",
                text: "Some documents have been marked for correction."
            });
            return; 
        }
        sendDataToAPI("approve");
    });
});

</script>

<%- include("../shared/footer.ejs") %>
